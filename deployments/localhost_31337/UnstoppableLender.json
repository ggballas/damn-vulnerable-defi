{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.7\"},\"sources\":{\"contracts/unstoppable/UnstoppableLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface IReceiver {\\n    function receiveTokens(address tokenAddress, uint256 amount) external;\\n}\\n\\n/**\\n * @title UnstoppableLender\\n * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)\\n */\\ncontract UnstoppableLender is ReentrancyGuard {\\n\\n    IERC20 public immutable damnValuableToken;\\n    uint256 public poolBalance;\\n\\n    constructor(address tokenAddress) {\\n        require(tokenAddress != address(0), \\\"Token address cannot be zero\\\");\\n        damnValuableToken = IERC20(tokenAddress);\\n    }\\n\\n    function depositTokens(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"Must deposit at least one token\\\");\\n        // Transfer token from sender. Sender must have first approved them.\\n        damnValuableToken.transferFrom(msg.sender, address(this), amount);\\n        poolBalance = poolBalance + amount;\\n    }\\n\\n    function flashLoan(uint256 borrowAmount) external nonReentrant {\\n        require(borrowAmount > 0, \\\"Must borrow at least one token\\\");\\n\\n        uint256 balanceBefore = damnValuableToken.balanceOf(address(this));\\n        require(balanceBefore >= borrowAmount, \\\"Not enough tokens in pool\\\");\\n\\n        // Ensured by the protocol via the `depositTokens` function\\n        assert(poolBalance == balanceBefore);\\n        \\n        damnValuableToken.transfer(msg.sender, borrowAmount);\\n        \\n        IReceiver(msg.sender).receiveTokens(address(damnValuableToken), borrowAmount);\\n        \\n        uint256 balanceAfter = damnValuableToken.balanceOf(address(this));\\n        require(balanceAfter >= balanceBefore, \\\"Flash loan hasn't been paid back\\\");\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x0165878A594ca255338adfa4d48449f69242Eb8F","bytecode":"0x60a06040523480156200001157600080fd5b5060405162000dd638038062000dd6833981810160405281019062000037919062000107565b6001600081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620000b2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a99062000160565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050506200020f565b6000815190506200010181620001f5565b92915050565b60006020828403121562000120576200011f620001c7565b5b60006200013084828501620000f0565b91505092915050565b600062000148601c8362000182565b91506200015582620001cc565b602082019050919050565b600060208201905081810360008301526200017b8162000139565b9050919050565b600082825260208201905092915050565b6000620001a082620001a7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b7f546f6b656e20616464726573732063616e6e6f74206265207a65726f00000000600082015250565b620002008162000193565b81146200020c57600080fd5b50565b60805160601c610b86620002506000396000818160c701528181610184015281816102840152818161034e015281816103c1015261054d0152610b866000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063154c5b0b1461005157806396365d441461006f5780639ab603b91461008d578063dd49756e146100a9575b600080fd5b6100596100c5565b6040516100669190610837565b60405180910390f35b6100776100e9565b60405161008491906108f2565b60405180910390f35b6100a760048036038101906100a29190610686565b6100ef565b005b6100c360048036038101906100be9190610686565b6104ba565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b60026000541415610135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012c906108d2565b60405180910390fd5b600260008190555060008111610180576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017790610872565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101db91906107bc565b60206040518083038186803b1580156101f357600080fd5b505afa158015610207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022b91906106b3565b905081811015610270576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610267906108b2565b60405180910390fd5b8060015414610282576102816109f2565b5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016102dd92919061080e565b602060405180830381600087803b1580156102f757600080fd5b505af115801561030b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032f9190610659565b503373ffffffffffffffffffffffffffffffffffffffff1663357291307f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b815260040161038b92919061080e565b600060405180830381600087803b1580156103a557600080fd5b505af11580156103b9573d6000803e3d6000fd5b5050505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161041891906107bc565b60206040518083038186803b15801561043057600080fd5b505afa158015610444573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046891906106b3565b9050818110156104ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a490610852565b60405180910390fd5b5050600160008190555050565b60026000541415610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906108d2565b60405180910390fd5b60026000819055506000811161054b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054290610892565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016105a8939291906107d7565b602060405180830381600087803b1580156105c257600080fd5b505af11580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa9190610659565b5080600154610609919061091e565b600181905550600160008190555050565b60008151905061062981610b22565b92915050565b60008135905061063e81610b39565b92915050565b60008151905061065381610b39565b92915050565b60006020828403121561066f5761066e610a50565b5b600061067d8482850161061a565b91505092915050565b60006020828403121561069c5761069b610a50565b5b60006106aa8482850161062f565b91505092915050565b6000602082840312156106c9576106c8610a50565b5b60006106d784828501610644565b91505092915050565b6106e981610974565b82525050565b6106f8816109bc565b82525050565b600061070b60208361090d565b915061071682610a55565b602082019050919050565b600061072e601e8361090d565b915061073982610a7e565b602082019050919050565b6000610751601f8361090d565b915061075c82610aa7565b602082019050919050565b600061077460198361090d565b915061077f82610ad0565b602082019050919050565b6000610797601f8361090d565b91506107a282610af9565b602082019050919050565b6107b6816109b2565b82525050565b60006020820190506107d160008301846106e0565b92915050565b60006060820190506107ec60008301866106e0565b6107f960208301856106e0565b61080660408301846107ad565b949350505050565b600060408201905061082360008301856106e0565b61083060208301846107ad565b9392505050565b600060208201905061084c60008301846106ef565b92915050565b6000602082019050818103600083015261086b816106fe565b9050919050565b6000602082019050818103600083015261088b81610721565b9050919050565b600060208201905081810360008301526108ab81610744565b9050919050565b600060208201905081810360008301526108cb81610767565b9050919050565b600060208201905081810360008301526108eb8161078a565b9050919050565b600060208201905061090760008301846107ad565b92915050565b600082825260208201905092915050565b6000610929826109b2565b9150610934836109b2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561096957610968610a21565b5b828201905092915050565b600061097f82610992565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006109c7826109ce565b9050919050565b60006109d9826109e0565b9050919050565b60006109eb82610992565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f466c617368206c6f616e206861736e2774206265656e2070616964206261636b600082015250565b7f4d75737420626f72726f77206174206c65617374206f6e6520746f6b656e0000600082015250565b7f4d757374206465706f736974206174206c65617374206f6e6520746f6b656e00600082015250565b7f4e6f7420656e6f75676820746f6b656e7320696e20706f6f6c00000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b610b2b81610986565b8114610b3657600080fd5b50565b610b42816109b2565b8114610b4d57600080fd5b5056fea26469706673582212201ff23f6aebbc35c9f4cde05c94bac9cadaba03b3baba0a273d5a946769a65b7264736f6c63430008070033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063154c5b0b1461005157806396365d441461006f5780639ab603b91461008d578063dd49756e146100a9575b600080fd5b6100596100c5565b6040516100669190610837565b60405180910390f35b6100776100e9565b60405161008491906108f2565b60405180910390f35b6100a760048036038101906100a29190610686565b6100ef565b005b6100c360048036038101906100be9190610686565b6104ba565b005b7f000000000000000000000000000000000000000000000000000000000000000081565b60015481565b60026000541415610135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012c906108d2565b60405180910390fd5b600260008190555060008111610180576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017790610872565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101db91906107bc565b60206040518083038186803b1580156101f357600080fd5b505afa158015610207573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022b91906106b3565b905081811015610270576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610267906108b2565b60405180910390fd5b8060015414610282576102816109f2565b5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016102dd92919061080e565b602060405180830381600087803b1580156102f757600080fd5b505af115801561030b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032f9190610659565b503373ffffffffffffffffffffffffffffffffffffffff1663357291307f0000000000000000000000000000000000000000000000000000000000000000846040518363ffffffff1660e01b815260040161038b92919061080e565b600060405180830381600087803b1580156103a557600080fd5b505af11580156103b9573d6000803e3d6000fd5b5050505060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161041891906107bc565b60206040518083038186803b15801561043057600080fd5b505afa158015610444573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046891906106b3565b9050818110156104ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a490610852565b60405180910390fd5b5050600160008190555050565b60026000541415610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f7906108d2565b60405180910390fd5b60026000819055506000811161054b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054290610892565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016105a8939291906107d7565b602060405180830381600087803b1580156105c257600080fd5b505af11580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa9190610659565b5080600154610609919061091e565b600181905550600160008190555050565b60008151905061062981610b22565b92915050565b60008135905061063e81610b39565b92915050565b60008151905061065381610b39565b92915050565b60006020828403121561066f5761066e610a50565b5b600061067d8482850161061a565b91505092915050565b60006020828403121561069c5761069b610a50565b5b60006106aa8482850161062f565b91505092915050565b6000602082840312156106c9576106c8610a50565b5b60006106d784828501610644565b91505092915050565b6106e981610974565b82525050565b6106f8816109bc565b82525050565b600061070b60208361090d565b915061071682610a55565b602082019050919050565b600061072e601e8361090d565b915061073982610a7e565b602082019050919050565b6000610751601f8361090d565b915061075c82610aa7565b602082019050919050565b600061077460198361090d565b915061077f82610ad0565b602082019050919050565b6000610797601f8361090d565b91506107a282610af9565b602082019050919050565b6107b6816109b2565b82525050565b60006020820190506107d160008301846106e0565b92915050565b60006060820190506107ec60008301866106e0565b6107f960208301856106e0565b61080660408301846107ad565b949350505050565b600060408201905061082360008301856106e0565b61083060208301846107ad565b9392505050565b600060208201905061084c60008301846106ef565b92915050565b6000602082019050818103600083015261086b816106fe565b9050919050565b6000602082019050818103600083015261088b81610721565b9050919050565b600060208201905081810360008301526108ab81610744565b9050919050565b600060208201905081810360008301526108cb81610767565b9050919050565b600060208201905081810360008301526108eb8161078a565b9050919050565b600060208201905061090760008301846107ad565b92915050565b600082825260208201905092915050565b6000610929826109b2565b9150610934836109b2565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561096957610968610a21565b5b828201905092915050565b600061097f82610992565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006109c7826109ce565b9050919050565b60006109d9826109e0565b9050919050565b60006109eb82610992565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b7f466c617368206c6f616e206861736e2774206265656e2070616964206261636b600082015250565b7f4d75737420626f72726f77206174206c65617374206f6e6520746f6b656e0000600082015250565b7f4d757374206465706f736974206174206c65617374206f6e6520746f6b656e00600082015250565b7f4e6f7420656e6f75676820746f6b656e7320696e20706f6f6c00000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b610b2b81610986565b8114610b3657600080fd5b50565b610b42816109b2565b8114610b4d57600080fd5b5056fea26469706673582212201ff23f6aebbc35c9f4cde05c94bac9cadaba03b3baba0a273d5a946769a65b7264736f6c63430008070033","abi":[{"inputs":[{"internalType":"address","name":"tokenAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"damnValuableToken","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"depositTokens","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"borrowAmount","type":"uint256"}],"name":"flashLoan","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"poolBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]}